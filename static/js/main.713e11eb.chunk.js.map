{"version":3,"sources":["Square.js","Board.js","App.js","serviceWorker.js","index.js","photo.jpg"],"names":["Square","props","PIECE_LENGTH","size","NUM_PIECES","top","Math","floor","pos","left","photoTop","index","photoLeft","className","id","style","position","width","height","backgroundPosition","backgroundImage","Photo","border","onClick","Board","useState","setSize","setPIECLENGTH","oriBoard","Array","keys","squarePosition","isBesideEmpty","board","emptySquare","indexOf","imgPosition","emptyPosition","abs","changeBoard","newEmptySquare","initRandonBoard","newBoard","i","posBesideEmpty","filter","posToMove","random","length","setBoard","moves","setMoves","isWin","setIsWin","info","setInfo","useEffect","moveSquare","square","toString","paddingLeft","type","name","value","defaultChecked","color","document","getElementById","checked","marginLeft","display","PhotoLength","map","key","App","Image","src","thumbnail","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.713e11eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport Photo from \"./photo.jpg\"\r\n\r\n// const SIZE = 3;\r\nconst PhotoLength = 600;\r\n\r\n\r\nexport const Square = (props) => {\r\n    // const SIZE = props.size;\r\n    const PIECE_LENGTH =  PhotoLength / props.size ;\r\n    const NUM_PIECES = props.size * props.size;\r\n\r\n    const top = Math.floor(props.pos / props.size) * PIECE_LENGTH;\r\n    const left = (props.pos % props.size) * PIECE_LENGTH;\r\n    const photoTop = Math.floor(props.index / props.size) * PIECE_LENGTH;\r\n    const photoLeft = (props.index % props.size) * PIECE_LENGTH;\r\n  \r\n    if (props.index !== NUM_PIECES -1) {\r\n        return (\r\n        \r\n        <div>\r\n            <div className=\"square\"\r\n            id = {props.index}\r\n            style = {{\r\n                position: \"absolute\",\r\n                width : `${PIECE_LENGTH}px`,\r\n                height: `${PIECE_LENGTH}px`,\r\n                top: top + 10,\r\n                left: left + 10,\r\n                backgroundPosition: `-${photoLeft}px -${photoTop}px`,\r\n                backgroundImage: `url(${Photo})`,\r\n                border: \"3px solid grey\"           \r\n            }} \r\n            onClick = {props.onClick}\r\n            >\r\n                \r\n            </div>\r\n            </div>\r\n        )\r\n        } else {\r\n            return (\r\n                <div className = \"square\"\r\n                id = {props.index}\r\n                style = {{\r\n                    width : `${PIECE_LENGTH}px`,\r\n                    height: `${PIECE_LENGTH}px`,\r\n                    top: top + 10,\r\n                    left: left + 10,\r\n                }}>\r\n\r\n                </div>\r\n            )\r\n\r\n                \r\n        }\r\n    \r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Square } from \"./Square\";\r\n\r\nconst PhotoLength = 600;\r\n\r\nexport const Board = (props) => {\r\n  const [size, setSize] = useState(3);\r\n// const [NUM_PIECES, setNumPieces] = useState(9);\r\n  // const NUM_PIECES = size * size;\r\n  // const PIECE_LENGTH = PhotoLength / size\r\n  // const [NUM_PIECES, setNUMPIECES] = useState(9);\r\n\r\n  const [PIECE_LENGTH, setPIECLENGTH] = useState(200);\r\n\r\n  const oriBoard = [...Array(size * size).keys()];\r\n\r\n  const squarePosition = (pos) => {\r\n    const row = pos % size;\r\n    const col = Math.floor(pos / size);\r\n    return [row, col];\r\n  };\r\n\r\n  const isBesideEmpty = (board, pos) => {\r\n    const emptySquare = board.indexOf(size * size - 1);\r\n    const imgPosition = squarePosition(pos);\r\n    const emptyPosition = squarePosition(emptySquare);\r\n    return (\r\n      (imgPosition[0] === emptyPosition[0] &&\r\n        Math.abs(imgPosition[1] - emptyPosition[1]) === 1) ||\r\n      (imgPosition[1] === emptyPosition[1] &&\r\n        Math.abs(imgPosition[0] - emptyPosition[0]) === 1)\r\n    );\r\n  };\r\n\r\n  const changeBoard = (board, pos) => {\r\n    const newEmptySquare = board.indexOf(size * size - 1);\r\n    const index = board[pos];\r\n    board[pos] = size * size - 1;\r\n    board[newEmptySquare] = index;\r\n\r\n    return board;\r\n  };\r\n\r\n  const initRandonBoard = () => {\r\n    let newBoard = [...Array(size * size).keys()];\r\n\r\n    for (let i = 0; i <= 5; i++) {\r\n      const posBesideEmpty = newBoard.filter((pos) =>\r\n        isBesideEmpty(newBoard, pos)\r\n      );\r\n      const posToMove =\r\n        posBesideEmpty[Math.floor(Math.random() * posBesideEmpty.length)];\r\n        newBoard = changeBoard(newBoard, posToMove);\r\n\r\n    }\r\n    return newBoard;\r\n    // setHistory(newBoard);\r\n  };\r\n\r\n  const [board, setBoard] = useState(initRandonBoard);\r\n  const [moves, setMoves] = useState(0);\r\n  const [isWin, setIsWin] = useState(false);\r\n  const [info, setInfo] = useState(`MOVES: ${moves}`);\r\n  // const [history, setHistory] = useState(board);\r\n  // console.log(board)\r\n\r\n  // const curretn = history[history.length-1]\r\n\r\n  //  const moveBack = history.map ((step,moves) => {\r\n  //    const desc = moves ?\r\n  //    \"Back to Move : \" + moves : \"Back to Start\";\r\n  //    return (\r\n  //      <li key={moves}>\r\n  //        <button onClick = {()=> this.jumpTo(moves)}>{desc}</button>\r\n  //      </li>\r\n  //    );\r\n  //  });\r\n  useEffect(() => {\r\n    setPIECLENGTH(PhotoLength / size);\r\n    setBoard(initRandonBoard);\r\n  },[size]);\r\n\r\n  const whetherSolved = () => {\r\n    if (board.toString() === oriBoard.toString()) {\r\n      setIsWin(true);\r\n    }\r\n  };\r\n\r\n  const moveSquare = (square) => {\r\n    const pos = board.indexOf(square);\r\n    if (isBesideEmpty(board, pos) && !isWin) {\r\n      const newMoves = moves + 1;\r\n      setMoves(newMoves);\r\n      const newBoard = changeBoard(board, pos);\r\n      setBoard(newBoard);\r\n      // const addHistory = history.push(newBoard);\r\n      // setHistory(addHistory);\r\n      whetherSolved();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    isWin\r\n      ? setInfo(`YOU WIN WITH ${moves} MOVES !!!`)\r\n      : setInfo(`MOVES: ${moves}`);\r\n  }, [moves, isWin]);\r\n\r\n\r\n  useEffect(() => {\r\n    isWin\r\n      ? setInfo(`YOU WIN WITH ${moves} MOVES !!!`)\r\n      : setInfo(`MOVES: ${moves}`);\r\n  }, [moves, isWin]);\r\n\r\n  const newGame = () => {\r\n    if (document.getElementById(\"radio1\").checked) {\r\n      setSize(2);\r\n    } else if (document.getElementById(\"radio2\").checked) {\r\n      setSize(3);\r\n    } else if (document.getElementById(\"radio3\").checked) {\r\n      setSize(4);\r\n    }\r\n    // setSize(midSize);\r\n    setIsWin(false);\r\n    setMoves(0);\r\n    setInfo(`MOVES: 0`);\r\n    var newBoard = initRandonBoard();\r\n    setBoard(newBoard);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"gameinfo\"\r\n      >\r\n        <div className=\"size\" style={{\r\n          paddingLeft: \"1em\"\r\n        }}>\r\n          <h5>Choose-Puzzle-Size</h5>\r\n          <div>\r\n            <input\r\n              type=\"radio\"\r\n              id=\"radio1\"\r\n              name=\"size\"\r\n              value=\"2\"\r\n            />{\" \"}\r\n            2*2\r\n            <input\r\n              type=\"radio\"\r\n              id=\"radio2\"\r\n              name=\"size\"\r\n              value=\"3\"\r\n              defaultChecked\r\n            />{\" \"}\r\n            3*3\r\n            <input\r\n              type=\"radio\"\r\n              id=\"radio3\"\r\n              name=\"size\"\r\n              value=\"4\"\r\n            />{\" \"}\r\n            4*4\r\n          </div>\r\n          <div style= {{\r\n            position: \"absolute\",\r\n            top: \"100px\",\r\n            left : \"400px\",\r\n            color: \"green\"\r\n          \r\n        }}><b>{info}</b></div>\r\n          \r\n        </div>\r\n        <br></br>\r\n        <button\r\n          onClick={newGame}\r\n          style={{\r\n            height: \"30px\",\r\n            marginLeft : \"2em\",\r\n            display: \"inline\"\r\n          }}\r\n        >\r\n         <b>New Game</b> \r\n        </button>\r\n       \r\n      </div>\r\n      <br></br>\r\n      <div\r\n        className=\"gameBoard\"\r\n        style={{\r\n          position: \"relative\",\r\n          width: `${PhotoLength + 30}px`,\r\n          height: `${PhotoLength + 30}px`,\r\n        }}\r\n      >\r\n        {board.map((index, pos) => (\r\n          <Square\r\n            index={index}\r\n            pos={pos}\r\n            key={index}\r\n            size={size}\r\n            onClick={() => {\r\n              moveSquare(index);\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// return (\r\n//   <div className=\"game\">\r\n//     <div\r\n//       className=\"gameBoard\"\r\n//       style={{\r\n//         position: \"relative\",\r\n//         height: `${size * PIECE_LENGTH + 30}px`,\r\n//         float: \"left\",\r\n//         width: `${size * PIECE_LENGTH + 30}px`,\r\n//       }}\r\n//     >\r\n//       {board.map((index, pos) => (\r\n//         <Square\r\n//           index={index}\r\n//           pos={pos}\r\n//           key={index}\r\n//           size={size}\r\n//           onClick={() => {\r\n//             moveSquare(index);\r\n//           }}\r\n//         />\r\n//       ))}\r\n//     </div>\r\n//     <div\r\n//       className=\"gameinfo\"\r\n//       style={{\r\n//         // height: \"50px\",\r\n//         // width: `${size*PIECE_LENGTH + 30}px`,\r\n//         marginLeft: `${PhotoLength + 100}px`,\r\n//       }}\r\n//     >\r\n//       <div className=\"gamesetting\">\r\n//         <form\r\n//           style={{\r\n//             padding: \"0\",\r\n//           }}\r\n//         >\r\n//           <h4>Puzzle Size :</h4>\r\n//           <input type=\"radio\" id=\"radio1\" name=\"size\" value=\"2\" /> 2*2\r\n//           <input\r\n//             type=\"radio\"\r\n//             id=\"radio2\"\r\n//             name=\"size\"\r\n//             value=\"3\"\r\n//             defaultChecked\r\n//           />{\" \"}\r\n//           3*3\r\n//           <input type=\"radio\" id=\"radio3\" name=\"size\" value=\"4\"/> 4*4\r\n//           <br></br>\r\n//           <br></br>\r\n//           <button\r\n//             onClick={() => {\r\n//               newGame();\r\n//             }}\r\n//             style={{\r\n//               height: \"30px\",\r\n//             }}\r\n//           >\r\n//             {\" \"}\r\n//             New Game\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//       <div className=\"moveinfo\">\r\n//         <h4>Information:</h4>\r\n//         {info}\r\n//       </div>\r\n//     </div>\r\n//     <div>{/* <ol>{moveBack}</ol> */}</div>\r\n//   </div>\r\n// );\r\n// };\r\n","import React from \"react\";\r\nimport { Board } from \"./Board\";\r\nimport \"./App.css\";\r\nimport Photo from \"./photo.jpg\";\r\nimport {Image} from \"react-bootstrap\"\r\n\r\nexport const App = (props) => {\r\n \r\n  return(\r\n\r\n  <div className=\"app\">\r\n    <h1> Hello Puzzle</h1>\r\n    <Board />\r\n    <Image src={Photo} thumbnail style={{\r\n      position: \"fixed\",\r\n      top: \"80px\",\r\n      left: \"700px\",\r\n      width: \"200px\",\r\n      height: \"200px\",\r\n      border: \"5px solid white\"\r\n    }}></Image>\r\n  </div>\r\n)\r\n\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/photo.11e46fdd.jpg\";"],"sourceRoot":""}